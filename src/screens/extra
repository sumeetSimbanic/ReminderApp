// import React, { useState, useEffect } from 'react';
// import { View, Text, Button, ToastAndroid, TextInput, FlatList } from 'react-native';
// import DateTimePickerModal from 'react-native-modal-datetime-picker';
// import * as Notifications from 'expo-notifications';
// import { Audio } from 'expo-av';
// import { useNavigation } from '@react-navigation/native';

// export default function HourlyReminder() {
//   const [startDateTime, setStartDateTime] = useState(null);
//   const [endDateTime, setEndDateTime] = useState(null);
//   const [intervalMinutes, setIntervalMinutes] = useState('');
//   const [showStartPicker, setShowStartPicker] = useState(false);
//   const [showEndPicker, setShowEndPicker] = useState(false);
//   const [reminders, setReminders] = useState([]);
//   const [sound, setSound] = useState();
//   const [snoozeTime, setSnoozeTime] = useState(null);
//   const navigation = useNavigation();

//   useEffect(() => {
//     const loadSound = async () => {
//       try {
//         const { sound } = await Audio.Sound.createAsync(
//           require('../../../assets/BestTune.mp3')
//         );
//         setSound(sound);
//       } catch (error) {
//         console.error('Error loading sound:', error);
//       }
//     };

//     loadSound();

//     return () => {
//       if (sound) {
//         sound.unloadAsync();
//       }
//     };
//   }, []);

//   const showDateTimePicker = (type) => {
//     if (type === 'start') {
//       setShowStartPicker(true);
//     } else {
//       setShowEndPicker(true);
//     }
//   };

//   const hideDateTimePicker = () => {
//     setShowStartPicker(false);
//     setShowEndPicker(false);
//   };

//   const handleDateTimePickerConfirm = (selectedDateTime, type) => {
//     hideDateTimePicker();

//     if (selectedDateTime) {
//       if (type === 'start') {
//         setStartDateTime(selectedDateTime);
//       } else {
//         setEndDateTime(selectedDateTime);
//       }
//     }
//   };

//   const scheduleReminders = async () => {
//     if (!startDateTime || !endDateTime || !intervalMinutes) {
//       ToastAndroid.show('Please select start date and time, end date and time, and interval', ToastAndroid.SHORT);
//       return;
//     }

//     if (endDateTime <= startDateTime) {
//       ToastAndroid.show('End date and time must be after start date and time', ToastAndroid.SHORT);
//       return;
//     }

//     const intervalMilliseconds = intervalMinutes * 60 * 1000; // Convert minutes to milliseconds

//     const now = new Date().getTime();
//     const firstReminderTime = startDateTime.getTime();
//     const lastReminderTime = endDateTime.getTime();

//     if (firstReminderTime >= lastReminderTime) {
//       ToastAndroid.show('End date and time must be after start date and time', ToastAndroid.SHORT);
//       return;
//     }

//     // Calculate the number of reminders based on the interval
//     const numberOfReminders = Math.floor((lastReminderTime - firstReminderTime) / intervalMilliseconds);

//     const newReminders = [];

//     for (let i = 0; i <= numberOfReminders; i++) {
//       const reminderTime = firstReminderTime + i * intervalMilliseconds;

//       // Set a notification for each reminder time
//       try {
//         await Notifications.scheduleNotificationAsync({
//           content: {
//             title: 'Alarm',
//             body: 'Time to wake up!',
//           },
//           trigger: {
//             date: new Date(reminderTime),
//           },
//         });
//       } catch (error) {
//         console.error('Error scheduling notification:', error);
//       }

//       // Play the sound when the alarm goes off
//       if (sound) {
//         // Play the sound when the alarm goes off
//         setTimeout(async () => {
//           await sound.replayAsync();
//           navigation.navigate('AlarmScreen');
//         }, reminderTime - now);
//       }

//       // Add the reminder details to the array
//       newReminders.push({
//         id: i.toString(),
//         time: new Date(reminderTime).toLocaleString(),
//       });
//     }

//     // Update the reminders array with the new reminders
//     setReminders(newReminders);

//     ToastAndroid.show('Alarms set successfully', ToastAndroid.SHORT);
//   };

//   const snoozeReminder = async () => {
//     if (!snoozeTime) {
//       ToastAndroid.show('Please select snooze time', ToastAndroid.SHORT);
//       return;
//     }

//     const now = new Date().getTime();
//     const snoozeMilliseconds = snoozeTime.getTime() - now;

//     try {
//       await Notifications.scheduleNotificationAsync({
//         content: {
//           title: 'Snooze',
//           body: 'Time for a little more rest!',
//         },
//         trigger: {
//           date: new Date(now + snoozeMilliseconds),
//         },
//       });
//     } catch (error) {
//       console.error('Error scheduling snooze notification:', error);
//     }

//     ToastAndroid.show('Snooze set successfully', ToastAndroid.SHORT);
//   };

//   return (
//     <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
//       <Text>Set Alarm</Text>
//       <Button title="Select Start Date and Time" onPress={() => showDateTimePicker('start')} />
//       <Text>Start Date and Time: {startDateTime && startDateTime.toLocaleString()}</Text>
//       <Button title="Select End Date and Time" onPress={() => showDateTimePicker('end')} />
//       <Text>End Date and Time: {endDateTime && endDateTime.toLocaleString()}</Text>
//       <TextInput
//         placeholder="Enter Interval in Minutes"
//         keyboardType="numeric"
//         value={intervalMinutes}
//         onChangeText={(text) => setIntervalMinutes(text)}
//         style={{ marginTop: 10, paddingHorizontal: 10, height: 40, width: 200, borderColor: 'gray', borderWidth: 1 }}
//       />
//       <Button title="Set Alarms" onPress={scheduleReminders} />

//       <TextInput
//   placeholder="Enter Snooze Time (optional)"
//   keyboardType="numeric"
//   value={snoozeTime ? snoozeTime.toString() : ''}
//   onChangeText={(text) => {
   
//     setSnoozeTime(new Date(new Date().getTime() + parseInt(text) * 60 * 1000));
//   }}
//   style={{ marginTop: 10, paddingHorizontal: 10, height: 40, width: 200, borderColor: 'gray', borderWidth: 1 }}
// />

//       <Button title="Snooze" onPress={snoozeReminder} />

//       <FlatList
//         data={reminders}
//         keyExtractor={(item) => item.id}
//         renderItem={({ item }) => (
//           <View style={{ marginTop: 10 }}>
//             <Text>{item.time}</Text>
//           </View>
//         )}
//       />

//       <DateTimePickerModal
//         isVisible={showStartPicker}
//         mode="datetime"
//         onConfirm={(selectedDateTime) => handleDateTimePickerConfirm(selectedDateTime, 'start')}
//         onCancel={hideDateTimePicker}
//       />

//       <DateTimePickerModal
//         isVisible={showEndPicker}
//         mode="datetime"
//         onConfirm={(selectedDateTime) => handleDateTimePickerConfirm(selectedDateTime, 'end')}
//         onCancel={hideDateTimePicker}
//       />
//     </View>
//   );
// }
// import React, { useState, useEffect } from 'react';
// import { View, Text, ScrollView, FlatList, TouchableOpacity, Modal, Button } from 'react-native';
// import DateTimePickerModal from 'react-native-modal-datetime-picker';
// import { Picker } from '@react-native-picker/picker';
// import * as SQLite from 'expo-sqlite';

// const db = SQLite.openDatabase({ name: 'mydatabase.db', location: 'default' });

// const DataYear = () => {
//   const [selectedInterval, setSelectedInterval] = useState('daily');
//   const [selectedDuration, setSelectedDuration] = useState('1');
//   const [selectedYearlyInterval, setSelectedYearlyInterval] = useState('1');
//   const [isSnoozeVisible, setSnoozeVisible] = useState(false);
//   const [snoozeTime, setSnoozeTime] = useState(5); // 5 minutes
//   const [snoozeInterval, setSnoozeInterval] = useState(60 * 60 * 1000); // 1 hour in milliseconds

//   const [selectedMonths, setSelectedMonths] = useState([]);
//   const [selectedDate, setSelectedDate] = useState('1');
//   const [selectedTime, setSelectedTime] = useState(new Date());
//   const [selectedReminders, setSelectedReminders] = useState([]);
//   const [isSnoozeActive, setIsSnoozeActive] = useState(false);
//   const [dates] = useState(Array.from({ length: 31 }, (_, i) => (i + 1).toString()));
//   const [maxIntervalValue] = useState(10);
//   const [intervalValues] = useState(Array.from({ length: maxIntervalValue }, (_, i) => (i + 1).toString()));
//   const [months] = useState([
//     'January', 'February', 'March', 'April', 'May', 'June',
//     'July', 'August', 'September', 'October', 'November', 'December'
//   ]);
//   const [isTimePickerVisible, setTimePickerVisible] = useState(false);
//   const [currentDateTime, setCurrentDateTime] = useState(new Date());

//   const updateCurrentDateTime = () => {
//     setCurrentDateTime(new Date());
//   };
//   const toggleMonthSelection = (month) => {
//     if (selectedMonths.includes(month)) {
//       setSelectedMonths(selectedMonths.filter((m) => m !== month));
//     } else {
//       setSelectedMonths([...selectedMonths, month]);
//     }
//   };
//   const snoozeReminder = () => {
//     const currentTime = selectedTime.getTime();
//     const snoozeTimeMilliseconds = snoozeTime * 60 * 1000; // Convert snooze time to milliseconds

//     if (selectedInterval !== 'daily' && selectedInterval !== 'weekly' && selectedInterval !== 'monthly') {
//       // Check if the interval is yearly or more
//       if (snoozeTimeMilliseconds <= snoozeInterval) {
//         // If snooze time is less than or equal to the snooze interval (1 hour), snooze is not allowed
//         alert('Snooze is not allowed for intervals less than 1 hour.');
//         return;
//       }
//     }

//     const newTime = new Date(currentTime + snoozeTimeMilliseconds);
//     setSelectedTime(newTime);
//     setSnoozeVisible(false);
//     setIsSnoozeActive(true);
//   };
// // Add this function inside your YearlyAll component
// const retrieveReminders = () => {
//   db.transaction((tx) => {
//     tx.executeSql(
//       'SELECT * FROM reminders',
//       [],
//       (_, { rows }) => {
//         // Log the retrieved reminders
//         const reminders = rows._array;
//         console.log('Retrieved Reminders:');
//         console.log(reminders);

//         if (reminders.length === 0) {
//           console.log('No reminders found in the database.');
//         }
//       },
//       (_, error) => {
//         console.error('Error retrieving reminders from the database', error);
//       }
//     );
//   });
// };

//   const createTable = () => {
//     db.transaction((tx) => {
//       tx.executeSql(
//         'CREATE TABLE IF NOT EXISTS reminders (id INTEGER PRIMARY KEY AUTOINCREMENT, interval TEXT, duration TEXT, months TEXT, date TEXT, time TEXT, year INTEGER)',
//         [],
//         (tx, results) => {
//           console.log('Table created successfully');
//         },
//         (error) => {
//           console.error('Error creating table: ', error);
//         }
//       );
//     });
//   };

//   useEffect(() => {
//     createTable();
//   }, []);

//   const addReminder = () => {
//     const yearlyInterval = parseInt(selectedYearlyInterval);
//     const currentYear = currentDateTime.getFullYear();
//     const allReminders = [];

//     for (const selectedMonth of selectedMonths) {
//       for (let i = 0; i < yearlyInterval; i++) {
//         const reminderYear = currentYear + i * yearlyInterval;
//         const lastDayOfMonth = new Date(reminderYear, months.indexOf(selectedMonth) + 1, 0).getDate();
//         const selectedDateInt = parseInt(selectedDate);

//         if (selectedDateInt >= 1 && selectedDateInt <= lastDayOfMonth) {
//           const newReminder = {
//             interval: selectedInterval,
//             duration: `${yearlyInterval} year(s)`,
//             months: [selectedMonth],
//             date: selectedDate,
//             time: selectedTime.toLocaleTimeString(),
//             year: reminderYear,
//           };

//           allReminders.push(newReminder);

//         }

//       }
//       retrieveReminders();

//     }

//     db.transaction((tx) => {
//       allReminders.forEach((reminder) => {
//         tx.executeSql(
//           'INSERT INTO reminders (interval, duration, months, date, time, year) VALUES (?, ?, ?, ?, ?, ?)',
//           [reminder.interval, reminder.duration, reminder.months.join(', '), reminder.date, reminder.time, reminder.year],
//           (tx, results) => {
//             console.log('Reminder inserted successfully');
//           },
//           (error) => {
//             console.error('Error inserting reminder: ', error);
//           }
//         );
//       });
//     });

//     setSelectedReminders([...selectedReminders, ...allReminders]);
//   };

//   const renderReminderItem = ({ item }) => (
//     <View style={{ marginVertical: 10 }}>
//       <Text>Interval: {item.interval}</Text>
//       <Text>Duration: {item.duration}</Text>
//       <Text>Months: {item.months.join(', ')}</Text>
//       <Text>Date: {item.date}</Text>
//       <Text>Time: {item.time}</Text>
//       <Text>Year: {item.year}</Text>
//     </View>
//   );

//   return (
//     <View>
//       <Text style={{ paddingTop: 10 }}>Current Date and Time: {currentDateTime.toLocaleString()}</Text>
//       <Text style={{ paddingTop: 10 }}>Select Interval:</Text>
//       <Picker
//         selectedValue={selectedInterval}
//         style={{ height: 50, width: '100%', color: 'red', backgroundColor: '#89CFF0' }}
//         onValueChange={(itemValue) => setSelectedInterval(itemValue)}
//       >
//         <Picker.Item label="Daily" value="daily" />
//         <Picker.Item label="Weekly" value="weekly" />
//         <Picker.Item label="Monthly" value="monthly" />
//         <Picker.Item label="Yearly" value="yearly" />
//       </Picker>
//       <Text style={{ paddingTop: 10 }}>Select Yearly Duration: {selectedYearlyInterval} year(s)</Text>
//       <Picker
//         selectedValue={selectedYearlyInterval}
//         style={{ width: '100%', color: 'red', backgroundColor: '#89CFF0' }}
//         onValueChange={(itemValue) => setSelectedYearlyInterval(itemValue)}
//       >
//         {intervalValues.map((value) => (
//           <Picker.Item key={value} label={`${value} year(s)`} value={value} />
//         ))}
//       </Picker>
//       <Text style={{ paddingTop: 10 }}>Selected Month(s):</Text>
//       <ScrollView horizontal={true} style={{ flexDirection: 'row' }}>
//         {months.map((month) => (
//           <TouchableOpacity
//             key={month}
//             onPress={() => toggleMonthSelection(month)}
//             style={{
//               backgroundColor: selectedMonths.includes(month) ? 'lightblue' : 'white',
//               padding: 10,
//               borderBottomWidth: 1,
//               borderColor: 'gray',
//               marginRight: 10,
//             }}
//           >
//             <Text style={{ color: "black" }}>{month}</Text>
//           </TouchableOpacity>
//         ))}
//       </ScrollView>
//       <Text style={{ paddingTop: 10 }}>Selected Months: {selectedMonths.join(', ')}</Text>

//       {/* Time Selection */}
//       <Button title="Pick Time" onPress={() => setTimePickerVisible(true)} />
//       <Text style={{ paddingTop: 10 }}>Select Time: {selectedTime.toLocaleTimeString()}</Text>

//       <TouchableOpacity onPress={() => setSnoozeVisible(true)}>
//         <View style={{ backgroundColor: 'blue', padding: 10, borderRadius: 5 }}>
//           <Text>Snooze is {isSnoozeActive ? 'on' : 'off'}</Text>
//         </View>
//       </TouchableOpacity>

//       {/* DateTimePickerModal for picking time */}
//       <DateTimePickerModal
//         isVisible={isTimePickerVisible}
//         mode="time"
//         onConfirm={(time) => {
//           setSelectedTime(time);
//           setTimePickerVisible(false);
//         }}
//         onCancel={() => setTimePickerVisible(false)}
//       />

//       <Picker
//         selectedValue={selectedDate}
//         style={{ width: '100%', color: 'red', backgroundColor: '#89CFF0', paddingTop: '10%' }}
//         onValueChange={(itemValue) => setSelectedDate(itemValue)}
//       >
//         {dates.map((date) => (
//           <Picker.Item key={date} label={date} value={date} />
//         ))}
//       </Picker>

//       <Modal
//         visible={isSnoozeVisible}
//         transparent={true}
//         animationType="slide"
//       >
//         <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.7)' }}>
//           <View style={{ backgroundColor: 'white', padding: 20, borderRadius: 10, width: '80%' }}>
//             <Text>Select Snooze Time (minutes)</Text>
//             <Picker
//               selectedValue={snoozeTime.toString()}
//               onValueChange={(itemValue) => setSnoozeTime(itemValue)}
//             >
//               <Picker.Item label="5" value="5" />
//               <Picker.Item label="10" value="10" />
//               {/* Add more snooze time options if needed */}
//             </Picker>
//             <Button title="Snooze" onPress={snoozeReminder} />
//             <Button title="Cancel" onPress={() => setSnoozeVisible(false)} />
//           </View>
//         </View>
//       </Modal>

//       <Text style={{ paddingTop: 10, }}>Select Date: {selectedDate}</Text>

//       <Button title="Add Reminder" onPress={addReminder} />
//       <FlatList
//         data={selectedReminders}
//         renderItem={renderReminderItem}
//         keyExtractor={(item, index) => index.toString()}
//       />
//     </View>
//   );
// };

// export default DataYear;
//@@@@@@@@@@@@@@@@@
// import React, { useState, useEffect } from 'react';
// import { View, Text, ScrollView, FlatList, TouchableOpacity, Modal, Button } from 'react-native';
// import DateTimePickerModal from 'react-native-modal-datetime-picker';
// import { Picker } from '@react-native-picker/picker';
// import * as SQLite from 'expo-sqlite';

// const db = SQLite.openDatabase({ name: 'mydatabase.db', location: 'default' });

// const DataYear = () => {
//   const [selectedInterval, setSelectedInterval] = useState('daily');
//   const [selectedDuration, setSelectedDuration] = useState('1');
//   const [selectedYearlyInterval, setSelectedYearlyInterval] = useState('1');
//   const [isSnoozeVisible, setSnoozeVisible] = useState(false);
//   const [snoozeTime, setSnoozeTime] = useState(5); // 5 minutes
//   const [snoozeInterval, setSnoozeInterval] = useState(60 * 60 * 1000); // 1 hour in milliseconds
//   const [databaseData, setDatabaseData] = useState([]);


//   const [selectedMonths, setSelectedMonths] = useState([]);
//   const [selectedDate, setSelectedDate] = useState('1');
//   const [selectedTime, setSelectedTime] = useState(new Date());
//   const [selectedReminders, setSelectedReminders] = useState([]);
//   const [isSnoozeActive, setIsSnoozeActive] = useState(false);
//   const [dates] = useState(Array.from({ length: 31 }, (_, i) => (i + 1).toString()));
//   const [maxIntervalValue] = useState(10);
//   const [intervalValues] = useState(Array.from({ length: maxIntervalValue }, (_, i) => (i + 1).toString()));
//   const [months] = useState([
//     'January', 'February', 'March', 'April', 'May', 'June',
//     'July', 'August', 'September', 'October', 'November', 'December'
//   ]);
//   const [isTimePickerVisible, setTimePickerVisible] = useState(false);
//   const [currentDateTime, setCurrentDateTime] = useState(new Date());

//   const updateCurrentDateTime = () => {
//     setCurrentDateTime(new Date());
//   };
//   const toggleMonthSelection = (month) => {
//     if (selectedMonths.includes(month)) {
//       setSelectedMonths(selectedMonths.filter((m) => m !== month));
//     } else {
//       setSelectedMonths([...selectedMonths, month]);
//     }
//   };
//   const snoozeReminder = () => {
//     const currentTime = selectedTime.getTime();
//     const snoozeTimeMilliseconds = snoozeTime * 60 * 1000; // Convert snooze time to milliseconds

//     if (selectedInterval !== 'daily' && selectedInterval !== 'weekly' && selectedInterval !== 'monthly') {
//       // Check if the interval is yearly or more
//       if (snoozeTimeMilliseconds <= snoozeInterval) {
//         // If snooze time is less than or equal to the snooze interval (1 hour), snooze is not allowed
//         alert('Snooze is not allowed for intervals less than 1 hour.');
//         return;
//       }
//     }

//     const newTime = new Date(currentTime + snoozeTimeMilliseconds);
//     setSelectedTime(newTime);
//     setSnoozeVisible(false);
//     setIsSnoozeActive(true);
//   };
// // Add this function inside your YearlyAll component

// const createTable = () => {
//   db.transaction((tx) => {
//     tx.executeSql(
//       'CREATE TABLE IF NOT EXISTS reminders (interval TEXT, duration TEXT, months TEXT, date TEXT, time TEXT, year INTEGER)',
//       [],
//       (tx, results) => {
//         console.log('Table created successfully');
//       },
//       (error) => {
//         console.error('Error creating table: ', error);
//       }
//     );
//   });
// };
// const getTableFields = (tableName) => {
//   db.transaction((tx) => {
//     tx.executeSql(
//       `PRAGMA table_info(${tableName})`,
//       [],
//       (_, { rows }) => {
//         const fields = rows._array.map((row) => row.name);
//         console.log('Table Fields:', fields);
//       },
//       (_, error) => {
//         console.error('Error getting table fields: ', error);
//       }
//     );
//   });
// };

// getTableFields('reminders');

// const addReminder = () => {
//   const yearlyInterval = parseInt(selectedYearlyInterval);
//   const currentYear = currentDateTime.getFullYear();
//   const allReminders = [];

//   for (const selectedMonth of selectedMonths) {
//     for (let i = 0; i < yearlyInterval; i++) {
//       const reminderYear = currentYear + i * yearlyInterval;
//       const lastDayOfMonth = new Date(reminderYear, months.indexOf(selectedMonth) + 1, 0).getDate();
//       const selectedDateInt = parseInt(selectedDate);

//       if (selectedDateInt >= 1 && selectedDateInt <= lastDayOfMonth) {
//         const newReminder = {
//           interval: selectedInterval,
//           duration: `${yearlyInterval} year(s)`,
//           months: [selectedMonth],
//           date: selectedDate,
//           time: selectedTime.toLocaleTimeString(),
//           year: reminderYear,
//         };

//         allReminders.push(newReminder);
//       }
//     }
//   }

//   retrieveReminders(); // You can retrieve reminders here if needed

//   db.transaction((tx) => {
//     allReminders.forEach((reminder) => {
//       tx.executeSql(
//         'INSERT INTO reminders (interval, duration, months, date, time, year) VALUES (?, ?, ?, ?, ?, ?)',
//         [reminder.interval, reminder.duration, reminder.months.join(', '), reminder.date, reminder.time, reminder.year],
//         (tx, results) => {
//           console.log('Reminder inserted successfully');
//         },
//         (error) => {
//           console.error('Error inserting reminder: ', error);
//         }
//       );
//     });
//   });

//   setSelectedReminders([...selectedReminders, ...allReminders]);
// };


// const renderReminderItem = ({ item }) => (
//   <View style={{ marginVertical: 10 }}>
//     <Text>Interval: {item.interval}</Text>
//     <Text>Duration: {item.duration}</Text>
//     <Text>Months: {item.months}</Text>
//     <Text>Date: {item.date}</Text>
//     <Text>Time: {item.time}</Text>
//     <Text>Year: {item.year}</Text>
//   </View>
// );
//   const retrieveReminders = () => {
//     db.transaction((tx) => {
//       tx.executeSql(
//         'SELECT * FROM reminders',
//         [],
//         (_, { rows }) => {
//           const reminders = rows._array;
//           setDatabaseData(reminders); // Set the retrieved data to state
//         },
//         (_, error) => {
//           console.error('Error retrieving reminders from the database', error);
//         }
//       );
//     });
//   };

//   useEffect(() => {
//     retrieveReminders(); // Retrieve reminders when the component mounts
//   }, []);
//   const renderDatabaseDataItem = ({ item }) => (
//     <View style={{ marginVertical: 10 }}>
//       <Text>Interval: {item.interval}</Text>
//       <Text>Duration: {item.duration}</Text>
//       <Text>Months: {item.months}</Text>
//       <Text>Date: {item.date}</Text>
//       <Text>Time: {item.time}</Text>
//       <Text>Year: {item.year}</Text>
//     </View>
//   );
//   return (
//     <View>
//       <Text style={{ paddingTop: 10 }}>Current Date and Time: {currentDateTime.toLocaleString()}</Text>
//       <Text style={{ paddingTop: 10 }}>Select Interval:</Text>
//       <Picker
//         selectedValue={selectedInterval}
//         style={{ height: 50, width: '100%', color: 'red', backgroundColor: '#89CFF0' }}
//         onValueChange={(itemValue) => setSelectedInterval(itemValue)}
//       >
//         <Picker.Item label="Daily" value="daily" />
//         <Picker.Item label="Weekly" value="weekly" />
//         <Picker.Item label="Monthly" value="monthly" />
//         <Picker.Item label="Yearly" value="yearly" />
//       </Picker>
//       <Text style={{ paddingTop: 10 }}>Select Yearly Duration: {selectedYearlyInterval} year(s)</Text>
//       <Picker
//         selectedValue={selectedYearlyInterval}
//         style={{ width: '100%', color: 'red', backgroundColor: '#89CFF0' }}
//         onValueChange={(itemValue) => setSelectedYearlyInterval(itemValue)}
//       >
//         {intervalValues.map((value) => (
//           <Picker.Item key={value} label={`${value} year(s)`} value={value} />
//         ))}
//       </Picker>
//       <Text style={{ paddingTop: 10 }}>Selected Month(s):</Text>
//       <ScrollView horizontal={true} style={{ flexDirection: 'row' }}>
//         {months.map((month) => (
//           <TouchableOpacity
//             key={month}
//             onPress={() => toggleMonthSelection(month)}
//             style={{
//               backgroundColor: selectedMonths.includes(month) ? 'lightblue' : 'white',
//               padding: 10,
//               borderBottomWidth: 1,
//               borderColor: 'gray',
//               marginRight: 10,
//             }}
//           >
//             <Text style={{ color: "black" }}>{month}</Text>
//           </TouchableOpacity>
//         ))}
//       </ScrollView>
//       <Text style={{ paddingTop: 10 }}>Selected Months: {selectedMonths.join(', ')}</Text>

//       {/* Time Selection */}
//       <Button title="Pick Time" onPress={() => setTimePickerVisible(true)} />
//       <Text style={{ paddingTop: 10 }}>Select Time: {selectedTime.toLocaleTimeString()}</Text>

//       <TouchableOpacity onPress={() => setSnoozeVisible(true)}>
//         <View style={{ backgroundColor: 'blue', padding: 10, borderRadius: 5 }}>
//           <Text>Snooze is {isSnoozeActive ? 'on' : 'off'}</Text>
//         </View>
//       </TouchableOpacity>

//       {/* DateTimePickerModal for picking time */}
//       <DateTimePickerModal
//         isVisible={isTimePickerVisible}
//         mode="time"
//         onConfirm={(time) => {
//           setSelectedTime(time);
//           setTimePickerVisible(false);
//         }}
//         onCancel={() => setTimePickerVisible(false)}
//       />

//       <Picker
//         selectedValue={selectedDate}
//         style={{ width: '100%', color: 'red', backgroundColor: '#89CFF0', paddingTop: '10%' }}
//         onValueChange={(itemValue) => setSelectedDate(itemValue)}
//       >
//         {dates.map((date) => (
//           <Picker.Item key={date} label={date} value={date} />
//         ))}
//       </Picker>

//       <Modal
//         visible={isSnoozeVisible}
//         transparent={true}
//         animationType="slide"
//       >
//         <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.7)' }}>
//           <View style={{ backgroundColor: 'white', padding: 20, borderRadius: 10, width: '80%' }}>
//             <Text>Select Snooze Time (minutes)</Text>
//             <Picker
//               selectedValue={snoozeTime.toString()}
//               onValueChange={(itemValue) => setSnoozeTime(itemValue)}
//             >
//               <Picker.Item label="5" value="5" />
//               <Picker.Item label="10" value="10" />
//               {/* Add more snooze time options if needed */}
//             </Picker>
//             <Button title="Snooze" onPress={snoozeReminder} />
//             <Button title="Cancel" onPress={() => setSnoozeVisible(false)} />
//           </View>
//         </View>
//       </Modal>

//       <Text style={{ paddingTop: 10, }}>Select Date: {selectedDate}</Text>

//       <Button title="Add Reminder" onPress={addReminder} />
//       <FlatList
//         data={selectedReminders}
//         renderItem={renderReminderItem}
//         keyExtractor={(item, index) => index.toString()}
//       />
//        <Text style={{ paddingTop: 10 }}>SQLite Database Data:</Text>
//       <View style={{ flexDirection: 'row', backgroundColor: '#f2f2f2', padding: 10 }}>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Interval</Text>
//         </View>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Duration</Text>
//         </View>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Months</Text>
//         </View>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Date</Text>
//         </View>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Time</Text>
//         </View>
//         <View style={{ flex: 1, fontWeight: 'bold' }}>
//           <Text>Year</Text>
//         </View>
//       </View>
//       <FlatList
//         data={databaseData}
//         renderItem={renderDatabaseDataItem}
//         keyExtractor={(item, index) => index.toString()}
//       />
//     </View>
//   );
// };

// export default DataYear;
